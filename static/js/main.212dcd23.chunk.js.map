{"version":3,"sources":["utils/SearchContext.js","components/MovieSearch.js","components/Header.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["SearchContext","React","createContext","search","setSearch","MovieSearch","useContext","value","onChange","type","Header","axios","get","then","data","Search","debouncedApiCall","debounce","API","App","useState","movies","setMovies","useEffect","Provider","event","target","className","map","movie","key","imdbID","Title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gRAMeA,G,MALOC,IAAMC,cAAc,CACtCC,OAAQ,GACRC,UAAW,gBCQAC,MATf,WAAuB,IAAD,EACUC,qBAAWN,GAAhCG,EADW,EACXA,OAAQC,EADG,EACHA,UACf,OAAO,2BACHG,MAAOJ,EACPK,SAAUJ,EACVK,KAAK,UCCEC,EANA,WACX,OAAO,gCACH,kBAAC,EAAD,QCHO,EACD,SAACP,GACP,OAAOQ,IAAMC,IAAN,qCAAwCT,EAAxC,oBACNU,MAAK,YACF,OADc,EAAVC,KACQC,QAAU,O,QCE5BC,E,MAAmBC,GAASC,EAAc,KA2BjCC,MAzBf,WAAgB,IAAD,EACeC,mBAAS,cADxB,mBACNjB,EADM,KACEC,EADF,OAEegB,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,KAOb,OAHAC,qBAAU,WACRP,EAAiBb,GAAQU,MAAK,SAAAQ,GAAM,OAAIC,EAAUD,QACjD,CAAClB,IAEF,kBAAC,EAAcqB,SAAf,CAAwBjB,MAAO,CAACJ,SAAQC,UAAW,SAAAqB,GAAK,OAAIrB,EAAUqB,EAAMC,OAAOnB,UACjF,yBAAKoB,UAAU,OACb,kBAAC,EAAD,MACA,6BACA,4BAEIN,EAAOO,KAAI,SAAAC,GACT,OAAO,wBAAIC,IAAKD,EAAME,QAASF,EAAMG,cCZ/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.212dcd23.chunk.js","sourcesContent":["import React from \"react\";\nconst SearchContext = React.createContext({\n    search: \"\",\n    setSearch: () => {}\n})\n\nexport default SearchContext;","import React, { useContext } from \"react\";\nimport SearchContext from \"../utils/SearchContext\";\nfunction MovieSearch(){\n    const {search, setSearch} = useContext(SearchContext);\n    return <input \n        value={search} \n        onChange={setSearch} \n        type=\"text\"\n    />\n}\n\nexport default MovieSearch;","import React from \"react\";\nimport MovieSearch from \"./MovieSearch\"\nconst Header = function(){\n    return <header>\n        <MovieSearch />\n    </header>\n}\n\nexport default Header;","import axios from \"axios\";\nexport default {\n    getMovie: (search) => {\n        return axios.get(`https://www.omdbapi.com/?s=${search}&apikey=trilogy`)\n        .then(({data}) => {\n            return data.Search || []\n        });\n    }\n}","import React, { useState, useEffect} from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Header from './components/Header';\nimport SearchContext from \"./utils/SearchContext\";\nimport API from './utils/API';\nimport debounce from 'debounce-promise'\nconst debouncedApiCall = debounce(API.getMovie, 500);\n\nfunction App() {\n  const [search, setSearch] = useState(\"The Matrix\");\n  const [movies, setMovies] = useState([]);\n  \n  useEffect(() => {\n    debouncedApiCall(search).then(movies => setMovies(movies));\n  }, [search])\n  return (\n    <SearchContext.Provider value={{search, setSearch: event => setSearch(event.target.value)}} >\n      <div className=\"App\">\n        <Header />\n        <hr/>\n        <ul>\n          {\n            movies.map(movie => {\n              return <li key={movie.imdbID}>{movie.Title}</li>\n            })\n          }\n          \n        </ul>\n      </div>\n    </SearchContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}